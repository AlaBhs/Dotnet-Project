// <auto-generated />
using System;
using Dotnet_Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dotnet_Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240202232906_mydatabase")]
    partial class mydatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dotnet_Project.Models.Lobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("team1_score")
                        .HasColumnType("int");

                    b.Property<int?>("team2_score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("Dotnet_Project.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exactLocalisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stadiums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "CHOUF 3CHIRI A9WA STADE F TUNIS KAMLA W YOUFA LA7DITH",
                            Localisation = "Monastir",
                            Name = "May Land",
                            PhotoPath = "Images/StadeMay.png",
                            PhotoPath2 = "Images/StadeMay2.png",
                            exactLocalisation = "https://maps.app.goo.gl/qfwmuN7oYvZAHxgo6"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A9WA STADE FEL 3ASSMA",
                            Localisation = "Route De Sidi Younes El Borj",
                            Name = "Five Stars",
                            PhotoPath = "Images/StadeFive.png",
                            PhotoPath2 = "/Images/StadeFive2.png",
                            exactLocalisation = "https://maps.app.goo.gl/JuCkdWuti8xPFwsE9"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A5YEB STADE F TUNIS KAMLA",
                            Localisation = "Charguia",
                            Name = "Stade Charguia",
                            PhotoPath = "Images/StadeCharguia.png",
                            PhotoPath2 = "Images/StadeCharguia2.png",
                            exactLocalisation = "https://maps.app.goo.gl/SYJ6qQaWXY9MkE7XA"
                        },
                        new
                        {
                            Id = 4,
                            Description = "AWEL STADE F MAHDIA",
                            Localisation = "Mahdia",
                            Name = "MStadium",
                            PhotoPath = "Images/MStadium.png",
                            PhotoPath2 = "Images/MStadium2.png",
                            exactLocalisation = "https://maps.app.goo.gl/k5BGdbc26YHUTnsy6"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A7SSEN STADE F MAHDIA",
                            Localisation = "Rejiche",
                            Name = "Parc Des Princes",
                            PhotoPath = "Images/PDP.png",
                            PhotoPath2 = "Images/PDP2.png",
                            exactLocalisation = "https://maps.app.goo.gl/YqEoZrBDytUnh2Te9"
                        },
                        new
                        {
                            Id = 6,
                            Description = "STADE F WOST 7OMMA T5AWEF ",
                            Localisation = "Monastir",
                            Name = "Al Kahna",
                            PhotoPath = "Images/Kahna.png",
                            PhotoPath2 = "Images/Kahna2.png",
                            exactLocalisation = "https://maps.app.goo.gl/pHnjSerugXFYSRE39"
                        },
                        new
                        {
                            Id = 7,
                            Description = "EKTICHAF JDID",
                            Localisation = "Monastir",
                            Name = "Stade Sahara Beach",
                            PhotoPath = "Images/Sahara.png",
                            PhotoPath2 = "Images/Sahara2.png",
                            exactLocalisation = "https://maps.app.goo.gl/UGkynYQKBK7Mai9U6"
                        });
                });

            modelBuilder.Entity("Dotnet_Project.Models.Time_Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("occupancy")
                        .HasColumnType("bit");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StadiumId = 1,
                            end_time = new DateTime(2024, 2, 3, 1, 59, 6, 352, DateTimeKind.Local).AddTicks(8173),
                            occupancy = true,
                            start_time = new DateTime(2024, 2, 3, 0, 29, 6, 352, DateTimeKind.Local).AddTicks(8112)
                        },
                        new
                        {
                            Id = 2,
                            StadiumId = 2,
                            end_time = new DateTime(2024, 2, 3, 1, 59, 6, 352, DateTimeKind.Local).AddTicks(8182),
                            occupancy = false,
                            start_time = new DateTime(2024, 2, 3, 0, 29, 6, 352, DateTimeKind.Local).AddTicks(8180)
                        },
                        new
                        {
                            Id = 3,
                            StadiumId = 3,
                            end_time = new DateTime(2024, 2, 3, 1, 59, 6, 352, DateTimeKind.Local).AddTicks(8186),
                            occupancy = false,
                            start_time = new DateTime(2024, 2, 3, 0, 29, 6, 352, DateTimeKind.Local).AddTicks(8185)
                        },
                        new
                        {
                            Id = 4,
                            StadiumId = 1,
                            end_time = new DateTime(2024, 2, 3, 3, 59, 6, 352, DateTimeKind.Local).AddTicks(8190),
                            occupancy = false,
                            start_time = new DateTime(2024, 2, 3, 2, 29, 6, 352, DateTimeKind.Local).AddTicks(8188)
                        },
                        new
                        {
                            Id = 5,
                            StadiumId = 2,
                            end_time = new DateTime(2024, 2, 3, 3, 59, 6, 352, DateTimeKind.Local).AddTicks(8194),
                            occupancy = false,
                            start_time = new DateTime(2024, 2, 3, 2, 29, 6, 352, DateTimeKind.Local).AddTicks(8192)
                        },
                        new
                        {
                            Id = 6,
                            StadiumId = 3,
                            end_time = new DateTime(2024, 2, 3, 3, 59, 6, 352, DateTimeKind.Local).AddTicks(8198),
                            occupancy = false,
                            start_time = new DateTime(2024, 2, 3, 2, 29, 6, 352, DateTimeKind.Local).AddTicks(8196)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dotnet_Project.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<int?>("LinkedLobbyId")
                        .HasColumnType("int");

                    b.Property<int?>("LobbyId")
                        .HasColumnType("int");

                    b.Property<int?>("LobbyId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StadeId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("int");

                    b.Property<int>("number_draws")
                        .HasColumnType("int");

                    b.Property<int>("number_losses")
                        .HasColumnType("int");

                    b.Property<int>("number_wins")
                        .HasColumnType("int");

                    b.HasIndex("LinkedLobbyId");

                    b.HasIndex("LobbyId");

                    b.HasIndex("LobbyId1");

                    b.HasIndex("StadeId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Dotnet_Project.Models.Lobby", b =>
                {
                    b.HasOne("Dotnet_Project.Models.Time_Slot", "TimeSlot")
                        .WithMany("LinkedLobbies")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Dotnet_Project.Models.Time_Slot", b =>
                {
                    b.HasOne("Dotnet_Project.Models.Stadium", "stadium")
                        .WithMany("Times")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("stadium");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dotnet_Project.Models.ApplicationUser", b =>
                {
                    b.HasOne("Dotnet_Project.Models.Lobby", "LinkedLobby")
                        .WithMany("Players")
                        .HasForeignKey("LinkedLobbyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dotnet_Project.Models.Lobby", null)
                        .WithMany("Team1")
                        .HasForeignKey("LobbyId");

                    b.HasOne("Dotnet_Project.Models.Lobby", null)
                        .WithMany("Team2")
                        .HasForeignKey("LobbyId1");

                    b.HasOne("Dotnet_Project.Models.Stadium", "stade")
                        .WithMany()
                        .HasForeignKey("StadeId");

                    b.Navigation("LinkedLobby");

                    b.Navigation("stade");
                });

            modelBuilder.Entity("Dotnet_Project.Models.Lobby", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("Dotnet_Project.Models.Stadium", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Dotnet_Project.Models.Time_Slot", b =>
                {
                    b.Navigation("LinkedLobbies");
                });
#pragma warning restore 612, 618
        }
    }
}
